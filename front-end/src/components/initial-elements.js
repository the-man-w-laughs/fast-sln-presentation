import React from "react";
import { MarkerType, Position } from "reactflow";

export const initialNodes = [
  {
    id: "Parser.BusinessRegistrationExtension",
    type: "classNode",
    data: {
      name: "BusinessRegistrationExtension",
      fullName: "Parser.BusinessRegistrationExtension",
      modifiers: "+ {static}",
      genericInfo: [],
      methods: [
        "+ {static} RegisterBusinessDependencies (services : IServiceCollection): void",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Parser.IObjFileParcer",
    type: "interfaceNode",
    data: {
      name: "IObjFileParcer",
      fullName: "Business.Contracts.Parser.IObjFileParcer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- ParseObjFile (filePath : string): Domain.ObjClass.Obj",
        "- ParseObjStream (stream : Stream): Domain.ObjClass.Obj",
        "- LoadObj (data : System.Collections.Generic.IEnumerable<string>): Domain.ObjClass.Obj",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
    type: "interfaceNode",
    data: {
      name: "IProjectionMatrixProvider",
      fullName:
        "Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- CreatePerspectiveProjectionMatrix (fieldOfView : float, aspectRatio : float, zNear : float, zFar : float): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
    type: "interfaceNode",
    data: {
      name: "ITransformationMatrixProvider",
      fullName:
        "Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreateScaleMatrix (scaleX : float, scaleY : float, scaleZ : float): System.Numerics.Matrix4x4",
        "+ CreateTranslationMatrix (translateX : float, translateY : float, translateZ : float): System.Numerics.Matrix4x4",
        "+ CreateRotationMatrix (axis : System.Numerics.Vector3, angleInDegrees : float): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Transformer.Providers.IViewMatrixProvider",
    type: "interfaceNode",
    data: {
      name: "IViewMatrixProvider",
      fullName: "Business.Contracts.Transformer.Providers.IViewMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- WorldToViewMatrix (eye : System.Numerics.Vector3, target : System.Numerics.Vector3, up : System.Numerics.Vector3): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
    type: "interfaceNode",
    data: {
      name: "IViewportMatrixProvider",
      fullName:
        "Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- CreateProjectionToViewportMatrix (screenWidth : uint, screenHeight : uint, xMin : float, yMin : float): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Transformer.Transpormers.ICoordinateTransformer",
    type: "interfaceNode",
    data: {
      name: "ICoordinateTransformer",
      fullName: "Transformer.Transpormers.ICoordinateTransformer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- ApplyTransform (vectors : List<System.Numerics.Vector3>, transform : System.Numerics.Matrix4x4): void",
        "- ApplyTransformAndDivideByW (vectors : List<System.Numerics.Vector3>, transform : System.Numerics.Matrix4x4): void",
        "- ApplyTransformAndDivideByW (vectors : System.Numerics.Vector3, transform : System.Numerics.Matrix4x4): System.Numerics.Vector3",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Utils.IPointCalculator",
    type: "interfaceNode",
    data: {
      name: "IPointCalculator",
      fullName: "Business.Contracts.Utils.IPointCalculator",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- CalculatePointOnPlane (X : float, Y : float): System.Numerics.Vector3",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.ITransformationHelper",
    type: "interfaceNode",
    data: {
      name: "ITransformationHelper",
      fullName: "Business.Contracts.ITransformationHelper",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- ConvertTo2DCoordinates (vertices : List<System.Numerics.Vector3>, width : uint, height : uint, camera : System.Numerics.Vector3): List<System.Numerics.Vector3>",
        "- ConvertTo2DCoordinates (target : System.Numerics.Vector3, width : uint, height : uint, camera : System.Numerics.Vector3): System.Numerics.Vector3",
        "- ConvertToGlobalCoordinates (obj : Domain.ObjClass.Obj, scale : int, rotationAxis : System.Numerics.Vector3, rotationAngleDegrees : int): List<System.Numerics.Vector3>",
      ],
      members: [],
    },
  },
  {
    id: "Business.Contracts.Utils.IZBuffer",
    type: "interfaceNode",
    data: {
      name: "IZBuffer",
      fullName: "Business.Contracts.Utils.IZBuffer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- TryPoint (vector : System.Numerics.Vector3): bool",
        "- SetPoint (x : uint, y : uint): bool",
      ],
      members: [
        "- PointCalculator : Business.Contracts.Utils.IPointCalculator<<set>>",
        "- Width : uint<<get>>",
        "- Height : uint<<get>>",
        "- Buffer : float[*,*]<<get>><<set>>",
      ],
    },
  },
  {
    id: "SfmlPresentation.Utils.PointCalculator",
    type: "classNode",
    data: {
      name: "PointCalculator",
      fullName: "SfmlPresentation.Utils.PointCalculator",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CalculatePointOnPlane (X : float, Y : float): System.Numerics.Vector3",
        "- GetPlaneParameters (points : System.Numerics.Vector3[]): (float A, float B, float C, float D)",
      ],
      members: [
        "- <<readonly>> vertices : System.Numerics.Vector3[]",
        "- planeParameters : (float A, float B, float C, float D)",
      ],
    },
  },
  {
    id: "Business.Utils.TransformationHelper",
    type: "classNode",
    data: {
      name: "TransformationHelper",
      fullName: "Business.Utils.TransformationHelper",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ ConvertToGlobalCoordinates (obj : Domain.ObjClass.Obj, scale : int, rotationAxis : System.Numerics.Vector3, rotationAngleDegrees : int): System.Collections.Generic.List<System.Numerics.Vector3>",
        "+ ConvertTo2DCoordinates (vertices : System.Collections.Generic.List<System.Numerics.Vector3>, width : uint, height : uint, eye : System.Numerics.Vector3): System.Collections.Generic.List<System.Numerics.Vector3>",
        "+ ConvertTo2DCoordinates (target : System.Numerics.Vector3, width : uint, height : uint, camera : System.Numerics.Vector3): System.Numerics.Vector3",
        "- GetFinalMatrix (width : uint, height : uint, eye : System.Numerics.Vector3): System.Numerics.Matrix4x4",
      ],
      members: [
        "- <<readonly>> _coordinateTransformer : Transformer.Transpormers.ICoordinateTransformer",
        "- <<readonly>> _transformationMatrixProvider : Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
        "- <<readonly>> _viewMatrixProvider : Business.Contracts.Transformer.Providers.IViewMatrixProvider",
        "- <<readonly>> _projectionMatrixProvider : Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
        "- <<readonly>> _viewportMatrixProvider : Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
      ],
    },
  },
  {
    id: "SfmlPresentation.Utils.Buffer.ZBuffer",
    type: "classNode",
    data: {
      name: "ZBuffer",
      fullName: "SfmlPresentation.Utils.Buffer.ZBuffer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- InitializeBuffer (): void",
        "+ SetPoint (x : uint, y : uint): bool",
        "+ TryPoint (vector : System.Numerics.Vector3): bool",
      ],
      members: [
        "- buffer : float[*,*]",
        "+ Width : uint<<get>>",
        "+ Height : uint<<get>>",
        "- _pointCalculator : Business.Contracts.Utils.IPointCalculator",
        "+ PointCalculator : Business.Contracts.Utils.IPointCalculator<<set>>",
        "+ Buffer : float[*,*]<<get>><<set>>",
      ],
    },
  },
  {
    id: "Domain.ObjClass.Extent",
    type: "classNode",
    data: {
      name: "Extent",
      fullName: "Domain.ObjClass.Extent",
      modifiers: "+",
      genericInfo: [],
      methods: [],
      members: [
        "+ XMax : float<<get>><<set>>",
        "+ XMin : float<<get>><<set>>",
        "+ YMax : float<<get>><<set>>",
        "+ YMin : float<<get>><<set>>",
        "+ ZMax : float<<get>><<set>>",
        "+ ZMin : float<<get>><<set>>",
        "+ XSize : float<<get>>",
        "+ YSize : float<<get>>",
        "+ ZSize : float<<get>>",
      ],
    },
  },
  {
    id: "Domain.ObjClass.Face",
    type: "classNode",
    data: {
      name: "Face",
      fullName: "Domain.ObjClass.Face",
      modifiers: "+",
      genericInfo: [],
      methods: [],
      members: [
        "+ UseMtl : string<<get>><<set>>",
        "+ VertexIndexList : int[]<<get>><<set>>",
        "+ TextureVertexIndexList : int[]<<get>><<set>>",
      ],
    },
  },
  {
    id: "Domain.ObjClass.Obj",
    type: "classNode",
    data: {
      name: "Obj",
      fullName: "Domain.ObjClass.Obj",
      modifiers: "+",
      genericInfo: [],
      methods: [],
      members: [
        "+ VertexList : System.Collections.Generic.List<System.Numerics.Vector3><<get>> = new List<Vector3>()",
        "+ FaceList : System.Collections.Generic.List<Domain.ObjClass.Face><<get>> = new List<Face>()",
        "+ TextureList : System.Collections.Generic.List<System.Numerics.Vector2><<get>> = new List<Vector2>()",
        "+ Mtl : string<<get>><<set>>",
        "+ Size : Domain.ObjClass.Extent<<get>>",
      ],
    },
  },
  {
    id: "SfmlPresentation.Scene.Camera",
    type: "classNode",
    data: {
      name: "Camera",
      fullName: "SfmlPresentation.Scene.Camera",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ ChangeAlphaIncrement (delta : double): void",
        "+ ChangeBetaIncrement (delta : double): void",
        "+ ChangeAlphaAssign (angle : double): void",
        "+ ChangeBetaAssign (angle : double): void",
      ],
      members: [
        "- _alpha : double",
        "- _beta : double",
        "- _r : double",
        "+ Eye : System.Numerics.Vector3<<get>>",
        "+ R : double<<get>><<set>>",
        "+ Alpha : double<<get>><<set>>",
        "+ Beta : double<<get>><<set>>",
      ],
    },
  },
  {
    id: "Parser.ObjFileParser",
    type: "classNode",
    data: {
      name: "ObjFileParser",
      fullName: "Parser.ObjFileParser",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ ParseObjFile (filePath : string): Domain.ObjClass.Obj",
        "+ ParseObjStream (data : System.IO.Stream): Domain.ObjClass.Obj",
        "+ LoadObj (data : IEnumerable<string>): Domain.ObjClass.Obj",
        "- processLine (line : string, obj : Domain.ObjClass.Obj): void",
        "- TryParseFloat (s : string, result : float): bool",
        "- TryParseInt (s : string, result : int): bool",
      ],
      members: [
        "- usemtl : string",
        "- const MinPartsLength : int = 4",
        "- const MinVertexPartsLength : int = 3",
        "- const MinTextureVertexPartsLength : int = 2",
      ],
    },
  },
  {
    id: "Parser.TransformerRegistrationExtension",
    type: "classNode",
    data: {
      name: "TransformerRegistrationExtension",
      fullName: "Parser.TransformerRegistrationExtension",
      modifiers: "+ {static}",
      genericInfo: [],
      methods: [
        "+ {static} RegisterParserDependencies (services : IServiceCollection): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.IColorProvider",
    type: "interfaceNode",
    data: {
      name: "IColorProvider",
      fullName: "SfmlPresentation.Contracts.IColorProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- GetColor (vertices : System.Numerics.Vector3[], light : System.Numerics.Vector3, zBuffer : Business.Contracts.Utils.IZBuffer): Color",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.IFaceDrawer",
    type: "interfaceNode",
    data: {
      name: "IFaceDrawer",
      fullName: "SfmlPresentation.Contracts.IFaceDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- DrawFace (image : Image, color : Color, vertices : System.Numerics.Vector3[], zBuffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.IFaceShadowMapFiller",
    type: "interfaceNode",
    data: {
      name: "IFaceShadowMapFiller",
      fullName: "SfmlPresentation.Contracts.IFaceShadowMapFiller",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- DrawFace (vertices : System.Numerics.Vector3[], zBuffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.ILineDrawer",
    type: "interfaceNode",
    data: {
      name: "ILineDrawer",
      fullName: "SfmlPresentation.Contracts.ILineDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ DrawLine (image : Image, color : Color, x0 : uint, y0 : uint, x1 : uint, y1 : uint, zBuffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.ILineShadowMapFiller",
    type: "interfaceNode",
    data: {
      name: "ILineShadowMapFiller",
      fullName: "SfmlPresentation.Contracts.ILineShadowMapFiller",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- DrawLine (x0 : uint, y0 : uint, x1 : uint, y1 : uint, zBuffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.IPolygonObjDrawer",
    type: "interfaceNode",
    data: {
      name: "IPolygonObjDrawer",
      fullName: "SfmlPresentation.Contracts.IPolygonObjDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- Draw (faces : List<Domain.ObjClass.Face>, verticesToDraw : List<System.Numerics.Vector4>, bitmap : Image, color : Color): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Contracts.IRasterizationObjDrawer",
    type: "interfaceNode",
    data: {
      name: "IRasterizationObjDrawer",
      fullName: "SfmlPresentation.Contracts.IRasterizationObjDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "- Draw (faces : System.Collections.Generic.List<Domain.ObjClass.Face>, vertices : System.Collections.Generic.List<System.Numerics.Vector3>, bitmap : Image, camera : System.Numerics.Vector3, light : System.Numerics.Vector3): void",
      ],
      members: [],
    },
  },
  {
    id: "MainWindow",
    type: "classNode",
    data: {
      name: "MainWindow",
      fullName: "MainWindow",
      modifiers: "+ partial",
      genericInfo: [],
      methods: [
        "- AppConfiguration (): void",
        "- _app_Resized (sender : object, e : SizeEventArgs): void",
        "- LoadScene (path : string): void",
        "- CanvasConfiguration (screenWidth : uint, screenHeight : uint): void",
        "+ Run (): void",
        "- DrawImage (): void",
        "- _app_MouseWheelScrolled (sender : object, e : MouseWheelScrollEventArgs): void",
        "- _app_MouseButtonReleased (sender : object, e : MouseButtonEventArgs): void",
        "- _app_MouseMoved (sender : object, e : MouseMoveEventArgs): void",
        "- App_MouseButtonPressed (sender : object, e : MouseButtonEventArgs): void",
        "- HandleKeyboardInput (): void",
        "- ClearImage (clearColor : SFML.Graphics.Color): void",
      ],
      members: [
        "- <<readonly>> _objFileParcer : Business.Contracts.Parser.IObjFileParcer",
        "- <<readonly>> _transformationHelper : Business.Contracts.ITransformationHelper",
        "- <<readonly>> _rasterizationObjDrawer : SfmlPresentation.Contracts.IRasterizationObjDrawer",
        "- _vertices : List<System.Numerics.Vector3>",
        "- _pixelTexture : Texture",
        "- _image : SFML.Graphics.Image",
        "- _pixelSprite : Sprite",
        "- _scale : int = 12",
        "- _camera : SfmlPresentation.Scene.Camera = new Camera(Math.PI / 2, 0, 7)",
        "- _light : SfmlPresentation.Scene.Camera = new Camera(Math.PI / 2, 0, 7)",
        "- _isSticky : bool = false",
        "- keyHandled : bool[] = new bool[(int)Key.KeyCount]",
        "- _obj : Domain.ObjClass.Obj",
        "- _app : RenderWindow",
        "- _screenWidth : uint",
        "- _screenHeight : uint",
        "- _elapsedTicks : long",
        "- _elapsedMilliseconds : long",
        "- _startPosition : Point",
        "- _isDown : bool",
        "- _Smoothness : float = 0.004f",
        "- _rSmoothness : float = 1f",
        "- _multiplyer : float = 0.0001f",
        "- _lightSmoothnessX : float = 0.005f",
        "- _lightSmoothnessY : float = 0.005f",
        "- _lightSmoothnessR : float = 0.02f",
        "- _cameraSmoothnessX : float = 0.002f",
        "- _cameraSmoothnessY : float = 0.002f",
        "- _cameraSmoothnessR : float = 0.01f",
        "- _isMoving : bool = true",
      ],
    },
  },
  {
    id: "SFMLPixelDrawing.Program",
    type: "classNode",
    data: {
      name: "Program",
      fullName: "SFMLPixelDrawing.Program",
      modifiers: "-",
      genericInfo: [],
      methods: [
        "- {static} Main (): void",
        "- {static} CreateHostBuilder (): IHostBuilder",
      ],
      members: [
        "+ {static} ServiceProvider : IServiceProvider<<get>><<private set>>",
      ],
    },
  },
  {
    id: "Parser.SfmlPresentetionRegistrationExtension",
    type: "classNode",
    data: {
      name: "SfmlPresentetionRegistrationExtension",
      fullName: "Parser.SfmlPresentetionRegistrationExtension",
      modifiers: "+ {static}",
      genericInfo: [],
      methods: [
        "+ {static} RegisterSfmlPresentationDependencies (services : IServiceCollection): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Utils.ColorProviders.LambertianLightDistribution",
    type: "classNode",
    data: {
      name: "LambertianLightDistribution",
      fullName:
        "SfmlPresentation.Utils.ColorProviders.LambertianLightDistribution",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ GetColor (vertices : System.Numerics.Vector3[], light : System.Numerics.Vector3, zBuffer : Business.Contracts.Utils.IZBuffer): Color",
        "- CalculateTriangleCentroid (point1 : System.Numerics.Vector3, point2 : System.Numerics.Vector3, point3 : System.Numerics.Vector3): System.Numerics.Vector3",
      ],
      members: [
        "- <<readonly>> _transformationHelper : Business.Contracts.ITransformationHelper",
      ],
    },
  },
  {
    id: "SfmlPresentation.Utils.ComponentDrawers.BresenhamDrawer",
    type: "classNode",
    data: {
      name: "BresenhamDrawer",
      fullName: "SfmlPresentation.Utils.ComponentDrawers.BresenhamDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ DrawLine (image : Image, color : Color, x0 : uint, y0 : uint, x1 : uint, y1 : uint, zBuffer : Business.Contracts.Utils.IZBuffer): void",
        "- SetPixel (image : Image, x : uint, y : uint, color : Color, zBuffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [],
    },
  },
  {
    id: "SfmlPresentation.Utils.ComponentDrawers.FaceDrawer",
    type: "classNode",
    data: {
      name: "FaceDrawer",
      fullName: "SfmlPresentation.Utils.ComponentDrawers.FaceDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ DrawFace (image : Image, color : Color, vertices : System.Numerics.Vector3[], zBuffer : Business.Contracts.Utils.IZBuffer): void",
        "- GetIntersect (x0 : int, y0 : int, x1 : int, y1 : int, y : int): int",
        "- DrawLineIfIntersects (image : Image, color : Color, startX : int, startY : int, endX : int, endY : int, buffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [
        "- <<readonly>> lineDrawer : SfmlPresentation.Contracts.ILineDrawer",
      ],
    },
  },
  {
    id: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
    type: "classNode",
    data: {
      name: "RasterizationObjDrawer",
      fullName: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ Draw (faces : List<Domain.ObjClass.Face>, allVertices : List<System.Numerics.Vector3>, image : Image, camera : System.Numerics.Vector3, light : System.Numerics.Vector3): void",
        "- IsClockwise (vertices : System.Numerics.Vector3[]): bool",
      ],
      members: [
        "- <<readonly>> _faceDrawer : SfmlPresentation.Contracts.IFaceDrawer",
        "- <<readonly>> _transformationHelper : Business.Contracts.ITransformationHelper",
        "- <<readonly>> _colorProvider : SfmlPresentation.Contracts.IColorProvider",
        "- <<readonly>> _faceShadowMapFiller : SfmlPresentation.Contracts.IFaceShadowMapFiller",
      ],
    },
  },
  {
    id: "SfmlPresentation.Utils.ComponentDrawers.FaceShadowMapFiller",
    type: "classNode",
    data: {
      name: "FaceShadowMapFiller",
      fullName: "SfmlPresentation.Utils.ComponentDrawers.FaceShadowMapFiller",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ DrawFace (vertices : System.Numerics.Vector3[], zBuffer : Business.Contracts.Utils.IZBuffer): void",
        "- GetIntersect (x0 : int, y0 : int, x1 : int, y1 : int, y : int): int",
        "- DrawLineIfIntersects (startX : int, startY : int, endX : int, endY : int, buffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [
        "- <<readonly>> lineDrawer : SfmlPresentation.Contracts.ILineShadowMapFiller",
      ],
    },
  },
  {
    id: "SfmlPresentation.Utils.ComponentDrawers.LineShadowMapFiller",
    type: "classNode",
    data: {
      name: "LineShadowMapFiller",
      fullName: "SfmlPresentation.Utils.ComponentDrawers.LineShadowMapFiller",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ DrawLine (x0 : uint, y0 : uint, x1 : uint, y1 : uint, zBuffer : Business.Contracts.Utils.IZBuffer): void",
      ],
      members: [],
    },
  },
  {
    id: "Tests.Parser.PointCalculatorTests",
    type: "classNode",
    data: {
      name: "PointCalculatorTests",
      fullName: "Tests.Parser.PointCalculatorTests",
      modifiers: "+",
      genericInfo: [],
      methods: ["+ CalculateZ (): void"],
      members: [],
    },
  },
  {
    id: "Tests.Parser.ObjFileParserTests",
    type: "classNode",
    data: {
      name: "ObjFileParserTests",
      fullName: "Tests.Parser.ObjFileParserTests",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ LoadObj_From_File (): void",
        "+ LoadObj_OneVert_OneVertCount (): void",
        "+ LoadOBj_TwoVerts_TwoVertCount (): void",
        "+ LoadObj_EmptyObj_EmptyObjNoVertsNoFaces (): void",
        "+ LoadObj_NoVertPositions_ThrowsArgumentException (): void",
        "+ LoadObj_CommaSeperatedVertPositions_ThrowsArgumentException (): void",
        "+ LoadObj_LettersInsteadOfPositions_ThrowsArgumentException (): void",
      ],
      members: ["- _objFileParser : Business.Contracts.Parser.IObjFileParcer"],
    },
  },
  {
    id: "Startup",
    type: "classNode",
    data: {
      name: "Startup",
      fullName: "Startup",
      modifiers: "+",
      genericInfo: [],
      methods: ["+ ConfigureServices (services : IServiceCollection): void"],
      members: [],
    },
  },
  {
    id: "Tests.Transformer.ProjectionMatrixProviderTests",
    type: "classNode",
    data: {
      name: "ProjectionMatrixProviderTests",
      fullName: "Tests.Transformer.ProjectionMatrixProviderTests",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreatePerspectiveProjectionMatrix_MatchesMatrix4x4Method (fieldOfView : float, aspectRatio : float, zNear : float, zFar : float): void",
      ],
      members: [
        "- <<readonly>> _projectionMatrixProvider : Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
      ],
    },
  },
  {
    id: "Tests.Transformer.TransformationMatrixProviderTests",
    type: "classNode",
    data: {
      name: "TransformationMatrixProviderTests",
      fullName: "Tests.Transformer.TransformationMatrixProviderTests",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreateScaleMatrix_MatchesMatrix4x4 (scaleX : float, scaleY : float, scaleZ : float): void",
        "+ CreateTranslationMatrix_MatchesMatrix4x4 (translateX : float, translateY : float, translateZ : float): void",
        "+ CreateRotationMatrix_MatchesMatrix4x4 (axisX : float, axisY : float, axisZ : float, angleInDegrees : float): void",
      ],
      members: [
        "- <<readonly>> _matrixProvider : Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
      ],
    },
  },
  {
    id: "Tests.Transformer.ViewMatrixProviderTests",
    type: "classNode",
    data: {
      name: "ViewMatrixProviderTests",
      fullName: "Tests.Transformer.ViewMatrixProviderTests",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ WorldToViewMatrix_CreatesCorrectViewMatrix (eyeX : float, eyeY : float, eyeZ : float, targetX : float, targetY : float, targetZ : float, upX : float, upY : float, upZ : float): void",
      ],
      members: [
        "- <<readonly>> _matrixProvider : Business.Contracts.Transformer.Providers.IViewMatrixProvider",
      ],
    },
  },
  {
    id: "Tests.Transformer.ViewportMatrixProviderTests",
    type: "classNode",
    data: {
      name: "ViewportMatrixProviderTests",
      fullName: "Tests.Transformer.ViewportMatrixProviderTests",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreateProjectionToViewportMatrix_CreatesCorrectMatrix (screenWidth : int, screenHeight : int): void",
      ],
      members: [
        "- <<readonly>> _matrixProvider : Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
      ],
    },
  },
  {
    id: "Transformer.Providers.ProjectionMatrixProvider",
    type: "classNode",
    data: {
      name: "ProjectionMatrixProvider",
      fullName: "Transformer.Providers.ProjectionMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreatePerspectiveProjectionMatrix (fieldOfView : float, aspectRatio : float, zNear : float, zFar : float): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Transformer.Providers.TransformationMatrixProvider",
    type: "classNode",
    data: {
      name: "TransformationMatrixProvider",
      fullName: "Transformer.Providers.TransformationMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreateScaleMatrix (scaleX : float, scaleY : float, scaleZ : float): System.Numerics.Matrix4x4",
        "+ CreateTranslationMatrix (translateX : float, translateY : float, translateZ : float): System.Numerics.Matrix4x4",
        "+ CreateRotationMatrix (axis : System.Numerics.Vector3, angleInDegrees : float): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Transformer.Providers.ViewMatrixProvider",
    type: "classNode",
    data: {
      name: "ViewMatrixProvider",
      fullName: "Transformer.Providers.ViewMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ WorldToViewMatrix (eye : System.Numerics.Vector3, target : System.Numerics.Vector3, up : System.Numerics.Vector3): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Transformer.Providers.ViewportMatrixProvider",
    type: "classNode",
    data: {
      name: "ViewportMatrixProvider",
      fullName: "Transformer.Providers.ViewportMatrixProvider",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ CreateProjectionToViewportMatrix (screenWidth : uint, screenHeight : uint, xMin : float, yMin : float): System.Numerics.Matrix4x4",
      ],
      members: [],
    },
  },
  {
    id: "Parser.TransformerRegistrationExtension",
    type: "classNode",
    data: {
      name: "TransformerRegistrationExtension",
      fullName: "Parser.TransformerRegistrationExtension",
      modifiers: "+ {static}",
      genericInfo: [],
      methods: [
        "+ {static} RegisterTransformerDependencies (services : IServiceCollection): void",
      ],
      members: [],
    },
  },
  {
    id: "Transformer.Transpormers.CoordinateTransformer",
    type: "classNode",
    data: {
      name: "CoordinateTransformer",
      fullName: "Transformer.Transpormers.CoordinateTransformer",
      modifiers: "+",
      genericInfo: [],
      methods: [
        "+ ApplyTransform (vectors : System.Collections.Generic.List<System.Numerics.Vector3>, transform : System.Numerics.Matrix4x4): void",
        "+ ApplyTransformAndDivideByW (vectors : System.Collections.Generic.List<System.Numerics.Vector3>, transform : System.Numerics.Matrix4x4): void",
        "+ ApplyTransformAndDivideByW (vector : System.Numerics.Vector3, transform : System.Numerics.Matrix4x4): System.Numerics.Vector3",
      ],
      members: [],
    },
  },
];
export const initialEdges = [
  // {
  //   id: "0",
  //   target: "Business.Contracts.Utils.IPointCalculator",
  //   source: "Business.Contracts.Utils.IZBuffer",
  //   type: "aggregation",
  // },
  // {
  //   id: "2",
  //   target: "Business.Contracts.Utils.IPointCalculator",
  //   source: "SfmlPresentation.Utils.PointCalculator",
  //   type: "impelementation",
  // },
  // {
  //   id: "5",
  //   target: "Business.Contracts.ITransformationHelper",
  //   source: "Business.Utils.TransformationHelper",
  //   type: "impelementation",
  // },
  // {
  //   id: "6",
  //   target: "Transformer.Transpormers.ICoordinateTransformer",
  //   source: "Business.Utils.TransformationHelper",
  //   type: "aggregation",
  // },
  // {
  //   id: "7",
  //   target:
  //     "Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
  //   source: "Business.Utils.TransformationHelper",
  //   type: "aggregation",
  // },
  // {
  //   id: "8",
  //   target: "Business.Contracts.Transformer.Providers.IViewMatrixProvider",
  //   source: "Business.Utils.TransformationHelper",
  //   type: "aggregation",
  // },
  // {
  //   id: "9",
  //   target:
  //     "Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
  //   source: "Business.Utils.TransformationHelper",
  //   type: "aggregation",
  // },
  // {
  //   id: "10",
  //   target: "Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
  //   source: "Business.Utils.TransformationHelper",
  //   type: "aggregation",
  // },
  // {
  //   id: "11",
  //   target: "Business.Contracts.Utils.IZBuffer",
  //   source: "SfmlPresentation.Utils.Buffer.ZBuffer",
  //   type: "impelementation",
  // },
  // {
  //   id: "13",
  //   target: "Business.Contracts.Utils.IPointCalculator",
  //   source: "SfmlPresentation.Utils.Buffer.ZBuffer",
  //   type: "aggregation",
  // },
  // {
  //   id: "14",
  //   target: "Business.Contracts.Utils.IPointCalculator",
  //   source: "SfmlPresentation.Utils.Buffer.ZBuffer",
  //   type: "aggregation",
  // },
  // {
  //   id: "21",
  //   target: "Domain.ObjClass.Extent",
  //   source: "Domain.ObjClass.Obj",
  //   type: "aggregation",
  // },
  // {
  //   id: "22",
  //   target: "System.Numerics.Vector3",
  //   source: "SfmlPresentation.Scene.Camera",
  //   type: "composition",
  // },
  // {
  //   id: "23",
  //   target: "Business.Contracts.Parser.IObjFileParcer",
  //   source: "Parser.ObjFileParser",
  //   type: "impelementation",
  // },
  // {
  //   id: "24",
  //   target: "Business.Contracts.Parser.IObjFileParcer",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "25",
  //   target: "Business.Contracts.ITransformationHelper",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "26",
  //   target: "SfmlPresentation.Contracts.IRasterizationObjDrawer",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "27",
  //   target: "List<System.Numerics.Vector3>",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "28",
  //   target: "Texture",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "29",
  //   target: "SFML.Graphics.Image",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "30",
  //   target: "Sprite",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "31",
  //   target: "SfmlPresentation.Scene.Camera",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "32",
  //   target: "SfmlPresentation.Scene.Camera",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "33",
  //   target: "bool[]",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "34",
  //   target: "Domain.ObjClass.Obj",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "35",
  //   target: "RenderWindow",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "36",
  //   target: "Point",
  //   source: "MainWindow",
  //   type: "aggregation",
  // },
  // {
  //   id: "37",
  //   target: "IServiceProvider",
  //   source: "SFMLPixelDrawing.Program",
  //   type: "aggregation",
  // },
  // {
  //   id: "38",
  //   target: "SfmlPresentation.Contracts.IColorProvider",
  //   source: "SfmlPresentation.Utils.ColorProviders.LambertianLightDistribution",
  //   type: "impelementation",
  // },
  // {
  //   id: "39",
  //   target: "Business.Contracts.ITransformationHelper",
  //   source: "SfmlPresentation.Utils.ColorProviders.LambertianLightDistribution",
  //   type: "aggregation",
  // },
  // {
  //   id: "40",
  //   target: "SfmlPresentation.Contracts.ILineDrawer",
  //   source: "SfmlPresentation.Utils.ComponentDrawers.BresenhamDrawer",
  //   type: "impelementation",
  // },
  // {
  //   id: "41",
  //   target: "SfmlPresentation.Contracts.IFaceDrawer",
  //   source: "SfmlPresentation.Utils.ComponentDrawers.FaceDrawer",
  //   type: "impelementation",
  // },
  // {
  //   id: "42",
  //   target: "SfmlPresentation.Contracts.ILineDrawer",
  //   source: "SfmlPresentation.Utils.ComponentDrawers.FaceDrawer",
  //   type: "aggregation",
  // },
  // {
  //   id: "43",
  //   target: "SfmlPresentation.Contracts.IRasterizationObjDrawer",
  //   source: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
  //   type: "impelementation",
  // },
  // {
  //   id: "44",
  //   target: "SfmlPresentation.Contracts.IFaceDrawer",
  //   source: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
  //   type: "aggregation",
  // },
  // {
  //   id: "45",
  //   target: "Business.Contracts.ITransformationHelper",
  //   source: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
  //   type: "aggregation",
  // },
  // {
  //   id: "46",
  //   target: "SfmlPresentation.Contracts.IColorProvider",
  //   source: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
  //   type: "aggregation",
  // },
  // {
  //   id: "47",
  //   target: "SfmlPresentation.Contracts.IFaceShadowMapFiller",
  //   source: "SfmlPresentation.Utils.ObjDrawers.RasterizationObjDrawer",
  //   type: "aggregation",
  // },
  // {
  //   id: "48",
  //   target: "SfmlPresentation.Contracts.IFaceShadowMapFiller",
  //   source: "SfmlPresentation.Utils.ComponentDrawers.FaceShadowMapFiller",
  //   type: "impelementation",
  // },
  // {
  //   id: "49",
  //   target: "SfmlPresentation.Contracts.ILineShadowMapFiller",
  //   source: "SfmlPresentation.Utils.ComponentDrawers.FaceShadowMapFiller",
  //   type: "aggregation",
  // },
  // {
  //   id: "50",
  //   target: "SfmlPresentation.Contracts.ILineShadowMapFiller",
  //   source: "SfmlPresentation.Utils.ComponentDrawers.LineShadowMapFiller",
  //   type: "impelementation",
  // },
  // {
  //   id: "51",
  //   target: "Business.Contracts.Parser.IObjFileParcer",
  //   source: "Tests.Parser.ObjFileParserTests",
  //   type: "aggregation",
  // },
  // {
  //   id: "52",
  //   target:
  //     "Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
  //   source: "Tests.Transformer.ProjectionMatrixProviderTests",
  //   type: "aggregation",
  // },
  // {
  //   id: "53",
  //   target:
  //     "Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
  //   source: "Tests.Transformer.TransformationMatrixProviderTests",
  //   type: "aggregation",
  // },
  // {
  //   id: "54",
  //   target: "Business.Contracts.Transformer.Providers.IViewMatrixProvider",
  //   source: "Tests.Transformer.ViewMatrixProviderTests",
  //   type: "aggregation",
  // },
  // {
  //   id: "55",
  //   target: "Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
  //   source: "Tests.Transformer.ViewportMatrixProviderTests",
  //   type: "aggregation",
  // },
  // {
  //   id: "56",
  //   target:
  //     "Business.Contracts.Transformer.Providers.IProjectionMatrixProvider",
  //   source: "Transformer.Providers.ProjectionMatrixProvider",
  //   type: "impelementation",
  // },
  // {
  //   id: "57",
  //   target:
  //     "Business.Contracts.Transformer.Providers.ITransformationMatrixProvider",
  //   source: "Transformer.Providers.TransformationMatrixProvider",
  //   type: "impelementation",
  // },
  // {
  //   id: "58",
  //   target: "Business.Contracts.Transformer.Providers.IViewMatrixProvider",
  //   source: "Transformer.Providers.ViewMatrixProvider",
  //   type: "impelementation",
  // },
  // {
  //   id: "59",
  //   target: "Business.Contracts.Transformer.Providers.IViewportMatrixProvider",
  //   source: "Transformer.Providers.ViewportMatrixProvider",
  //   type: "impelementation",
  // },
  // {
  //   id: "60",
  //   target: "Transformer.Transpormers.ICoordinateTransformer",
  //   source: "Transformer.Transpormers.CoordinateTransformer",
  //   type: "impelementation",
  // },
];
